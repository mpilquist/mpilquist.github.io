<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: scodec,scala | mpilquist.github.io]]></title>
  <link href="http://mpilquist.github.io/blog/categories/scodec-scala/atom.xml" rel="self"/>
  <link href="http://mpilquist.github.io/"/>
  <updated>2015-06-23T00:43:42-04:00</updated>
  <id>http://mpilquist.github.io/</id>
  <author>
    <name><![CDATA[Michael Pilquist]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Invariant Shadows - Part 2: Monoidals]]></title>
    <link href="http://mpilquist.github.io/blog/2015/06/22/invariant-shadows-part-2/"/>
    <updated>2015-06-22T12:52:15-04:00</updated>
    <id>http://mpilquist.github.io/blog/2015/06/22/invariant-shadows-part-2</id>
    <content type="html"><![CDATA[<p>In the <a href="/blog/2015/06/18/invariant-shadows/">last post</a>, we built type classes for a subset of invariant functors &ndash; namely, type classes that drew inspiration from the covariant <code>FlatMap</code> and <code>Monad</code>. In this article, we&rsquo;ll explore invariant shadows of the type classes supporting applicative functors.</p>

<p>Disclaimer: I am not a category theorist, and in both the previous article and this article, I use fairly loose reasoning to explore these type classes. Corrections are welcome.</p>

<p>First, let&rsquo;s review the definition of an applicative functor, using a type class hierachy similar to the one used in <a href="https://github.com/non/cats">Cats</a>. (These examples are simplified versions of the definitions in the Cats codebase.)</p>

<pre><code class="scala">trait Apply[F[_]] extends Functor[F] {
  def ap[A, B](fa: F[A])(ff: F[A =&gt; B]): F[B]
}

trait Applicative[F[_]] extends Apply[F] {
  def pure[A](a: A): F[A]
  def map[A, B](fa: F[A])(f: A =&gt; B): F[B] = ap(fa)(pure(f))
}
</code></pre>

<p>Along with laws:</p>

<pre><code class="scala">def applyComposition[F[_], A, B, C](fa: F[A], fab: F[A =&gt; B], fbc: F[B =&gt; C])(implicit F: Apply[F]): Boolean = {
  val compose: (B =&gt; C) =&gt; (A =&gt; B) =&gt; (A =&gt; C) = _.compose
  F.ap(F.ap(fa)(fab))(fbc) == F.ap(fa)(F.ap(fab)(F.map(fbc)(compose)))
}

def applicativeIdentity[F[_], A](fa: F[A])(implicit F: Applicative[F]): Boolean =
  F.ap(fa)(F.pure((a: A) =&gt; a)) == fa

def applicativeHomomorphism[F[_], A, B](a: A, f: A =&gt; B)(implicit F: Applicative[F]): Boolean =
  F.ap(F.pure(a))(F.pure(f)) == F.pure(f(a))

def applicativeInterchange[F[_], A, B](a: A, ff: F[A =&gt; B])(implicit F: Applicative[F]): Boolean =
  F.ap(F.pure(a))(ff) == F.ap(ff)(F.pure((f: A =&gt; B) =&gt; f(a)))

def applicativeMap[F[_], A, B](fa: F[A], f: A =&gt; B)(implicit F: Applicative[F]): Boolean =
  F.map(fa)(f) == F.ap(fa)(F.pure(f))
</code></pre>

<h3>Applicative[Codec]</h3>

<p>Can we define an <code>Applicative[Codec]</code> instance?  We&rsquo;ve previously seen how <code>Codec</code> has an invariant functor instance but not a covariant functor instance. As such, we can rule out an <code>Applicative[Codec]</code>, for if we could define such an instance, it would give rise to a <code>Functor[Codec]</code>. Regardless, let&rsquo;s try to implement such an instance, as it is illustrative.</p>

<p>In the last article, it was implied that we can implement pure for <code>Codec</code>. Here&rsquo;s an implementation:</p>

<pre><code class="scala">def pure[A](a: A): Codec[A] = new Codec[A] {
  def sizeBound = SizeBound.exact(0)
  def encode(a: A) = Attempt.successful(BitVector.empty)
  def decode(b: BitVector) = Attempt.successful(DecodeResult(a, b))
}
</code></pre>

<p>The encode operation always returns an empty vector, while the decode operation always returns the full input as the remainder and returns the pure value as the decoded value.</p>

<p>How about <code>ap</code>?</p>

<pre><code class="scala">def ap[A, B](ca: Codec[A])(cf: Codec[A =&gt; B]): Codec[B] = new Codec[B] {
  def sizeBound = SizeBound.unknown
  def decode(b: BitVector) = (for {
    decA &lt;- DecodingContext(ca)
    defF &lt;- DecodingContext(cb)
  } yield decF(decA)).decode(b)
  def encode(b: B) = {
    ???
  }
}
</code></pre>

<p>The decode case is easy enough to define using the <code>DecodingContext</code> type from scodec, which is equivalent to a <code>StateT[Attempt, BitVector, ?]</code> monad transformer stack, threading the remainder of each decode as the state value. We encounter an impasse in <code>encode</code> though. We could try to add a <code>B =&gt; A</code> function, though it is not obvious as to how that would help. Instead, we can use an alternative form of applicative functors known as monoidal functors.</p>

<h2>Monoidal Functors</h2>

<p><a href="https://wiki.haskell.org/Typeclassopedia#Alternative_formulation">(Lax) monoidal functors</a> are an alternative form of applicative functors &ndash; similar to how monads can be represented with either <code>pure</code> and <code>flatMap</code> or <code>unit</code>, <code>flatten</code> (aka <code>join</code>), and <code>map</code>.</p>

<pre><code class="scala">trait Monoidal[F[_]] extends Functor[F] {
  def unit: F[Unit]
  def zip[A, B](fa: F[A], fb: F[B]): F[(A, B)]
}
</code></pre>

<p>Instead of defining <code>pure</code> and <code>ap</code>, monoidal functors are defined in terms of <code>unit</code>, <code>zip</code>, and <code>map</code>. Note that in the standard/typical definition, <code>map</code> is derived from <code>pure</code> and <code>ap</code> but in the monoidal definition, <code>map</code> is left abstract.</p>

<p>The laws for monoidal functors are the following:</p>

<pre><code class="scala">trait Iso[A, B] { def apply(a: A): B }

implicit class IsoOps[A](val a: A) {
  def ~=[B](b: B)(implicit iso: Iso[A, B]): Boolean = iso(a) == b
}

def monoidalLeftIdentity[F[_], A](fa: F[A])(implicit F: Monoidal[F], iso: Iso[F[(Unit, A)], F[A]]): Boolean =
  F.zip(F.unit, fa) ~= fa

def monoidalRightIdentity[F[_], A](fa: F[A])(implicit F: Monoidal[F], iso: Iso[F[(A, Unit)], F[A]]): Boolean =
  F.zip(fa, F.unit) ~= fa

def monoidalAssociativity[F[_], A, B, C](fa: F[A], fb: F[B], fc: F[C])(implicit F: Monoidal[F], iso: Iso[F[(A, (B, C))], F[((A, B), C)]]): Boolean =
  F.zip(fa, F.zip(fb, fc)) ~= F.zip(F.zip(fa, fb), fc)
</code></pre>

<p>The identity laws state that zipping a value with the unit value yields the original value, ignoring the tuple structure. The associativity law requires <code>zip</code> to be associative, again ignoring the tuple structure. Here, like in the Typeclassopedia definition, we defer the equality checking to an isomorphism that ignores the unwanted structure.</p>

<p>We could further generalize this type class by removing the requirement for the <code>unit</code> and <code>map</code> operations, leaving simply <code>zip</code> along with the associativity law &ndash; this is exactly what Scalaz has done with the <code>scalaz.Zip</code> type class.</p>

<h3>Converting applicative forms</h3>

<p>We can convert any applicative functor to a monoidal functor and vice-versa:</p>

<pre><code class="scala">implicit def applicativeToMonoidal[F[_]](implicit F: Applicative[F]): Monoidal[F] = new Monoidal[F] {
  def unit: F[Unit] = F.pure(())
  def zip[A, B](fa: F[A], fb: F[B]): F[(A, B)] = F.ap(fb)(F.map(fa)(a =&gt; (b: B) =&gt; (a, b)))
  def map[A, B](fa: F[A])(f: A =&gt; B): F[B] = F.map(fa)(f)
}

implicit def monoidalToApplicative[F[_]](implicit F: Monoidal[F]): Applicative[F] = new Applicative[F] {
  def pure[A](a: A): F[A] = F.map(F.unit)(_ =&gt; a)
  def ap[A, B](fa: F[A])(ff: F[A =&gt; B]): F[B] = F.map(F.zip(fa, ff)) { case (a, f) =&gt; f(a) }
}
</code></pre>

<h2>Monoidal[Codec]</h2>

<p>Let&rsquo;s try to implement a <code>Monoidal</code> instance for <code>Codec</code>.</p>

<p>The definition of <code>unit</code> looks very similar to the definition of <code>pure</code>:</p>

<pre><code class="scala">def unit: Codec[Unit] = new Codec[Unit] {
  def sizeBound = SizeBound.exact(0)
  def encode(a: A) = Attempt.successful(BitVector.empty)
  def decode(b: BitVector) = Attempt.successful(DecodeResult((), b))
}
</code></pre>

<p>Now let&rsquo;s try to implement <code>zip</code> &ndash; note that we should not be able to, as we know <code>Codec</code> doesn&rsquo;t have a covariant functor.</p>

<pre><code class="scala">def zip[A, B](ca: Codec[A], cb: Codec[B]): Codec[(A, B)] = new Codec[(A, B)] {
  def sizeBound = ca.sizeBound + cb.sizeBound
  def decode(b: BitVector) = (for {
    a &lt;- DecodingContext(ca)
    b &lt;- DecodingContext(cb)
  } yield (a, b)).decode(b)
  def encode(ab: (A, B)) = for {
    encA &lt;- ca.encode(ab._1)
    encB &lt;- cb.encode(ab._2)
  } yield encA ++ encB
}
</code></pre>

<p>Wait, so what are we missing? We have an implementation of <code>unit</code> and <code>zip</code> and yet we know we can&rsquo;t have a lawful <code>Monoidal[Codec]</code> instance due to the fact that there&rsquo;s no covariant functor for <code>Codec</code>. Monoidal functors have <em>three</em> abstract operations though, not two (like <code>Applicative</code>) &ndash; <code>unit</code>, <code>zip</code>, and <code>map</code>. So in order to have a monoidal functor for <code>Codec</code>, we need to define <code>map</code>, which we know we can&rsquo;t do!</p>

<p>However, we do have <code>xmap</code>. What happens if we pair <code>xmap</code> with <code>unit</code> and <code>zip</code>?</p>

<h2>Invariant monoidal functors</h2>

<p>Let&rsquo;s define a new invariant shadow of <code>Monoidal</code> that extends <code>InvariantFunctor</code> instead of <code>Functor</code>:</p>

<pre><code class="scala">trait InvariantMonoidal[F[_]] extends InvariantFunctor[F] {
  def unit: F[Unit]
  def zip[A, B](fa: F[A], fb: F[B]): F[(A, B)]
}
</code></pre>

<p>We can also port the laws from lax monoidal functors, which are identical except for requiring an <code>InvariantMonoidal</code> instance instead of a <code>Monoidal</code> instance:</p>

<pre><code class="scala">def xmonoidalLeftIdentity[F[_], A](fa: F[A])(implicit F: InvariantMonoidal[F], iso: Iso[F[(Unit, A)], F[A]]): Boolean =
  F.zip(F.unit, fa) ~= fa

def xmonoidalRightIdentity[F[_], A](fa: F[A])(implicit F: InvariantMonoidal[F], iso: Iso[F[(A, Unit)], F[A]]): Boolean =
  F.zip(fa, F.unit) ~= fa

def xmonoidalAssociativity[F[_], A, B, C](fa: F[A], fb: F[B], fc: F[C])(implicit F: InvariantMonoidal[F], iso: Iso[F[(A, (B, C))], F[((A, B), C)]]): Boolean =
  F.zip(fa, F.zip(fb, fc)) ~= F.zip(F.zip(fa, fb), fc)
</code></pre>

<h3>Deriving an <code>InvariantMonoidal</code> from an <code>InvariantMonad</code></h3>

<p>In the same way that a monad yields two monoidal functors (or two applicative functors) &ndash; one that evaluates <code>F[A]</code> first and <code>F[B]</code> second, and another which evaluates in the reverse order &ndash; an invariant monad gives rise to two invariant monoidal functors. For example, the following implementation evaluates the <code>F[A]</code> first and the <code>F[B]</code> second:</p>

<pre><code class="scala">implicit def xmonadToXmonoidal[F[_]](implicit F: InvariantMonad[F]): InvariantMonoidal[F] = new InvariantMonoidal[F] {
  def unit: F[Unit] = F.pure(())
  def zip[A, B](fa: F[A], fb: F[B]): F[(A, B)] =
    F.xflatMap(fa)(a =&gt; F.xmap(fb)(b =&gt; (a, b))(ab =&gt; ab._2))(ab =&gt; ab._1)
  def xmap[A, B](fa: F[A])(f: A =&gt; B)(g: B =&gt; A): F[B] = F.xmap(fa)(f)(g)
}
</code></pre>

<h3>Sharing unit/zip</h3>

<p>Because the invariant monoidal differs from the covariant monoidal only in the defintion of <code>xmap</code>/<code>map</code>, we could extract a type class that captures the signature of <code>unit</code> and <code>zip</code> and the laws that govern their interaction.</p>

<pre><code class="scala">trait MonoidalBase[F[_]] {
  def unit: F[Unit]
  def zip[A, B](fa: F[A], fb: F[B]): F[(A, B)]
}
trait Monoidal[F[_]] extends MonoidalBase[F] with Functor[F]
trait InvariantMonoidal[F[_]] extends MonoidalBase[F] with InvariantFunctor[F]
</code></pre>

<h2>Applicability to Codec</h2>

<p>In the last article, we saw that <code>Codec</code> supported both <code>flatZip</code> and <code>consume</code>, and how those methods exist due to the invariant monad structure of <code>Codec</code>. In fact, those methods both existed <em>before</em> the invariant monad structure was extracted. Is the same true for <code>unit</code> and <code>zip</code>? That is, do those methods exist under some other name, their existence justified by their usefulness in binary codec creation, rather than satisfying a type class definition?</p>

<p>It turns out that both of these operations do exist already. The <code>unit</code> operation is provided by <code>scodec.codecs.ignore(0L)</code>, which returns a <code>Codec[Unit]</code> that encodes an empty bit vector. The <code>zip</code> operation is provided by the <code>pairedWith</code> method on codec &ndash; which has the operator alias <code>~</code>.</p>

<p>We did not provide an invariant shadow of applicative functors, though that is worth exploring, perhaps in a future article.</p>
]]></content>
  </entry>
  
</feed>
