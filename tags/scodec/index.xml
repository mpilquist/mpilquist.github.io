<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scodec on mpilquist</title>
    <link>https://mpilquist.github.io/tags/scodec/</link>
    <description>Recent content in Scodec on mpilquist</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2012 - 2023 Michael Pilquist</copyright>
    <lastBuildDate>Mon, 21 Sep 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mpilquist.github.io/tags/scodec/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Practical Binary with Scodec: Applying Typelevel Programming and Shapeless to the Mundane</title>
      <link>https://mpilquist.github.io/blog/2015/09/21/scalaworld/</link>
      <pubDate>Mon, 21 Sep 2015 00:00:00 +0000</pubDate>
      <guid>https://mpilquist.github.io/blog/2015/09/21/scalaworld/</guid>
      <description>&lt;p&gt;Talk given at &lt;a href=&#34;http://scala.world&#34;&gt;Scala World&lt;/a&gt; in Penrith, UK. Slides available on &lt;a href=&#34;https://speakerdeck.com/mpilquist/practical-binary-with-scodec-and-shapeless&#34;&gt;SpeakerDeck&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Tour of Functional Structures via Scodec and Simulacrum</title>
      <link>https://mpilquist.github.io/blog/2015/08/14/sbtb/</link>
      <pubDate>Fri, 14 Aug 2015 00:00:00 +0000</pubDate>
      <guid>https://mpilquist.github.io/blog/2015/08/14/sbtb/</guid>
      <description>&lt;p&gt;Talk given at &lt;a href=&#34;http://scala.bythebay.io&#34;&gt;Scala By The Bay 2015&lt;/a&gt;. Slides available on &lt;a href=&#34;https://speakerdeck.com/mpilquist/a-tour-of-functional-structures-via-scodec-and-simulacrum&#34;&gt;SpeakerDeck&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Invariant Shadows - Part 2: Monoidals</title>
      <link>https://mpilquist.github.io/blog/2015/06/22/invariant-shadows-part-2/</link>
      <pubDate>Mon, 22 Jun 2015 00:00:00 +0000</pubDate>
      <guid>https://mpilquist.github.io/blog/2015/06/22/invariant-shadows-part-2/</guid>
      <description>In the last post, we built type classes for a subset of invariant functors &amp;ndash; namely, type classes that drew inspiration from the covariant FlatMap and Monad. In this article, we&amp;rsquo;ll explore invariant shadows of the type classes supporting applicative functors.&#xA;Disclaimer: I am not a category theorist, and in both the previous article and this article, I use fairly loose reasoning to explore these type classes. Corrections are welcome.</description>
    </item>
    <item>
      <title>Invariant Shadows</title>
      <link>https://mpilquist.github.io/blog/2015/06/18/invariant-shadows/</link>
      <pubDate>Thu, 18 Jun 2015 00:00:00 +0000</pubDate>
      <guid>https://mpilquist.github.io/blog/2015/06/18/invariant-shadows/</guid>
      <description>A common use case when working with binary protocols is decoding a value and then using the decoded value to determine how to decode the remaining bits. For example, consider a simple framing structure, made up of a 2-byte big endian unsigned integer field followed by n bytes, where n is the value in the first field. In order to decode this structure, we need to first decode the 2-byte size field, then use the decoded size to take that number of bytes from the remainder.</description>
    </item>
    <item>
      <title>Introduction to generic programming with Shapeless, with applications from scodec</title>
      <link>https://mpilquist.github.io/blog/2015/04/22/intro-to-shapeless/</link>
      <pubDate>Wed, 22 Apr 2015 00:00:00 +0000</pubDate>
      <guid>https://mpilquist.github.io/blog/2015/04/22/intro-to-shapeless/</guid>
      <description>&lt;p&gt;Talk given at &lt;a href=&#34;http://www.meetup.com/scala-phase/&#34;&gt;PHASE&lt;/a&gt;. Slides available on &lt;a href=&#34;https://speakerdeck.com/mpilquist/introduction-to-shapeless-with-applications-from-scodec&#34;&gt;SpeakerDeck&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>scodec - Part 3 - Shapeless</title>
      <link>https://mpilquist.github.io/blog/2013/06/09/scodec-part-3/</link>
      <pubDate>Sun, 09 Jun 2013 00:00:00 +0000</pubDate>
      <guid>https://mpilquist.github.io/blog/2013/06/09/scodec-part-3/</guid>
      <description>&lt;p&gt;This is part 3 of a series of posts about &lt;a href=&#34;http://github.com/mpilquist/scodec/&#34;&gt;scodec&lt;/a&gt;. In &lt;a href=&#34;https://mpilquist.github.io/blog/2013/06/01/scodec-part-2/&#34;&gt;Part 2&lt;/a&gt;, we saw how to create a &lt;code&gt;Codec[A]&lt;/code&gt; and xmap it in to a &lt;code&gt;Codec[B]&lt;/code&gt;. In this post, we&amp;rsquo;ll show how to use &lt;a href=&#34;http://github.com/milessabin/shapeless/&#34;&gt;Shapeless&lt;/a&gt; to perform automatic xmapping to case classes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>scodec - Part 2 - Conversions</title>
      <link>https://mpilquist.github.io/blog/2013/06/01/scodec-part-2/</link>
      <pubDate>Sat, 01 Jun 2013 00:00:00 +0000</pubDate>
      <guid>https://mpilquist.github.io/blog/2013/06/01/scodec-part-2/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;https://mpilquist.github.io/blog/2013/05/27/scodec-intro/&#34;&gt;Part 1&lt;/a&gt;, we looked at the codec trait and a way to create a &lt;code&gt;Codec[(A, B)]&lt;/code&gt; out of a &lt;code&gt;Codec[A]&lt;/code&gt; and a &lt;code&gt;Codec[B]&lt;/code&gt;. In this post, we&amp;rsquo;ll look at converting a &lt;code&gt;Codec[A]&lt;/code&gt; to a &lt;code&gt;Codec[B]&lt;/code&gt; using a type driven approach and we&amp;rsquo;ll get our feet wet with some category theory.&lt;/p&gt;</description>
    </item>
    <item>
      <title>scodec - Part 1 - Introduction</title>
      <link>https://mpilquist.github.io/blog/2013/05/27/scodec-intro/</link>
      <pubDate>Mon, 27 May 2013 00:00:00 +0000</pubDate>
      <guid>https://mpilquist.github.io/blog/2013/05/27/scodec-intro/</guid>
      <description>&lt;p&gt;I recently started the &lt;a href=&#34;http://github.com/mpilquist/scodec&#34;&gt;scodec&lt;/a&gt; project to simplify handling of binary data in Scala. From the project page:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;This library focuses on contract-first and pure functional encoding and decoding of binary data.&#xA;The following design constraints are considered:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Binary structure should mirror protocol definitions and be self-evident under casual reading&lt;/li&gt;&#xA;&lt;li&gt;Mapping binary structures to types should be statically verified&lt;/li&gt;&#xA;&lt;li&gt;Encoding and decoding should be purely functional&lt;/li&gt;&#xA;&lt;li&gt;Failures in encoding and decoding should provide descriptive errors&lt;/li&gt;&#xA;&lt;li&gt;Compiler plugin should not be used&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;As a result, the library is implemented as a combinator based DSL.&#xA;Performance is considered but yields to the above design constraints.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;This article will introduce some of the main abstractions in scodec and discuss some of the design decisions. Subsequent articles will discuss more interesting parts of scodec, including invariant functors and use of &lt;a href=&#34;http://github.com/milessabing/shapeless&#34;&gt;Shapeless&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
